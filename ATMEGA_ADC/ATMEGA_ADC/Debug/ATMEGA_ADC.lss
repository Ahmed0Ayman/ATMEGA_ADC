
ATMEGA_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  000001aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f9  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000703  00000000  00000000  00000c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000471  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e1  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f6  00000000  00000000  00001d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001f8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <AComp_Init>:
}/* END_FUN ADC_GET_VALUE()*/



PUBLIC void AComp_Init(AnalogComp_Handler_t * Handler)
{
  7c:	fc 01       	movw	r30, r24
	SFIOR &=  ~(1<<ACME);
  7e:	80 b7       	in	r24, 0x30	; 48
  80:	87 7f       	andi	r24, 0xF7	; 247
  82:	80 bf       	out	0x30, r24	; 48
	SFIOR |= (Handler->Analog_Comp_NegPin_Select) & (1<<ACME) ;
  84:	90 b7       	in	r25, 0x30	; 48
  86:	80 81       	ld	r24, Z
  88:	88 70       	andi	r24, 0x08	; 8
  8a:	89 2b       	or	r24, r25
  8c:	80 bf       	out	0x30, r24	; 48
	ADMUX &=  ~(0xf8);
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	87 70       	andi	r24, 0x07	; 7
  92:	87 b9       	out	0x07, r24	; 7
	ADMUX |= Handler->Analog_Comp_NegPin_Select & (0x07);
  94:	97 b1       	in	r25, 0x07	; 7
  96:	80 81       	ld	r24, Z
  98:	87 70       	andi	r24, 0x07	; 7
  9a:	89 2b       	or	r24, r25
  9c:	87 b9       	out	0x07, r24	; 7
	
	if (Handler->Analog_Comp_Interrupt == AComp_INIT_EN)
  9e:	82 81       	ldd	r24, Z+2	; 0x02
  a0:	88 30       	cpi	r24, 0x08	; 8
  a2:	29 f4       	brne	.+10     	; 0xae <AComp_Init+0x32>
	{
		ACSR |= (1<<ACIE);
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	88 b9       	out	0x08, r24	; 8
		sei();	
  aa:	78 94       	sei
  ac:	08 95       	ret
	}else{
		ACSR &=~(1<<ACIE);
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	87 7f       	andi	r24, 0xF7	; 247
  b2:	88 b9       	out	0x08, r24	; 8
  b4:	08 95       	ret

000000b6 <AComp_Get>:


PUBLIC bool AComp_Get(void)
{
	
	return (ACSR & (1<<ACO)) ;
  b6:	88 b1       	in	r24, 0x08	; 8
	
}
  b8:	85 fb       	bst	r24, 5
  ba:	88 27       	eor	r24, r24
  bc:	80 f9       	bld	r24, 0
  be:	08 95       	ret

000000c0 <main>:
float data ;
AnalogComp_Handler_t  AComp_Handler ;

int main(void)
{
	ADC_Handler.ADC_Adjust_Select = ADC_Adjust_Right ;
  c0:	e0 e6       	ldi	r30, 0x60	; 96
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	12 82       	std	Z+2, r1	; 0x02
	ADC_Handler.ADC_Intrrupet_Select = ADC_INIT_DISABLE ;
  c6:	13 82       	std	Z+3, r1	; 0x03
	ADC_Handler.ADC_PreScaler = ADC_Presaler_2 ;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	81 83       	std	Z+1, r24	; 0x01
	ADC_Handler.ADC_TRIG_SOURCE = ADC_TRIG_FREE_RUNNING ;
  cc:	10 82       	st	Z, r1
	ADC_Handler.ADC_Vref_Select = ADC_Vref_AVCC ;
  ce:	80 e4       	ldi	r24, 0x40	; 64
  d0:	84 83       	std	Z+4, r24	; 0x04
//	ADC_INIT(&ADC_Handler);

	AComp_Handler.Analog_Comp_Interrupt = AComp_INIT_EN ;
  d2:	e9 e6       	ldi	r30, 0x69	; 105
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	82 83       	std	Z+2, r24	; 0x02
	AComp_Handler.Analog_Comp_NegPin_Select = AComp_PIN_AIN1 ;
  da:	10 82       	st	Z, r1
	AComp_Handler.Analog_Comp_OutEnable = AComp_OUT_EN ;
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	81 83       	std	Z+1, r24	; 0x01

	AComp_Init(&AComp_Handler);
  e0:	cf 01       	movw	r24, r30
  e2:	0e 94 3e 00 	call	0x7c	; 0x7c <AComp_Init>
	DDRD = 0xff ;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	81 bb       	out	0x11, r24	; 17
    /* Replace with your application code */
    while (1) 
    {
		if (AComp_Get())
  ea:	0e 94 5b 00 	call	0xb6	; 0xb6 <AComp_Get>
  ee:	88 23       	and	r24, r24
  f0:	e1 f3       	breq	.-8      	; 0xea <main+0x2a>
		{
			PORTD ^= 0xff ;
  f2:	82 b3       	in	r24, 0x12	; 18
  f4:	80 95       	com	r24
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	f8 cf       	rjmp	.-16     	; 0xea <main+0x2a>

000000fa <__vector_18>:
		//_delay_ms(500);
    }
}

ISR(ANA_COMP_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
			PORTD ^= 0xff ;
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	80 95       	com	r24
 10e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	81 ee       	ldi	r24, 0xE1	; 225
 114:	94 e0       	ldi	r25, 0x04	; 4
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <__vector_18+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <__vector_18+0x26>
 120:	00 00       	nop
	_delay_ms(100);
	
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
